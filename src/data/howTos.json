[
  {
    "category": "tailwind",
    "subcategory": "Add Custom Styles To Tailwind",
    "md": "## Add custom Styles to Tailwind\n\nThere are multiple ways to customize your styles in Tailwind.\n\n## Use arbitrary values\n\nIf you are in a situation where you really need to be pixel-perfect and need something like 'top: 10px' you can use Tailwind's square bracket notation just for that. This is basically inline style, but can be used with Tailwind modifiers like hover:\n\n```html\n<div class=\"top-[10px]\"><\/div> \n<div class=\"hover:top-[20px]\"><\/div>\n```\n\n## Use CSS and @layer\n\nThe easiest approach to add custom CSS is to just add the CSS to your stylesheet with @layer:\n\n```css\nindex.css\n\n@layer base {\n  a {\n    color: rgb(157, 178, 191);\n    text-decoration: underline; \n  } \n}\n```\n\n## Why does Tailwind group styles into layers?\n\nIn CSS, the order of the rules in your stylesheet decides which declaration wins when two selectors have the same specificity. To manage this, Tailwind organizes the styles it generates into three different layers - a concept popularized by ITCSS. \n- The base layer is for things like reset rules or default styles applied to plain HTML elements. \n- The components layer is for class-based styles that you want to be able to override with utilities. \n- The utilities layer is for small, single-purpose classes that should always take precedence over any other styles.\n\n## Use Tailwind Config\n\nAnother approach is to add your custom styles to your tailwind.config using the plugin system. This makes sharing your styles to others or between different projects very easy.\n\n```js\ntailwind.config.js\n\nconst plugin = require(\"tailwindcss\/plugin\");\n\nplugins: [\n  plugin(function ({ addBase }) {\n    addBase({ \n      a: { color: \"rgb(157, 178, 191)\", \"text-decoration\": \"underline\" } \n    }) \n  }) \n]\n```"
  },
  {
    "category":"daisyui",
    "subcategory":"Build a Button to change the current daisyUI-Theme in React",
    "md":"# Build a Button to change the current daisyUI-Theme in React\n\n## Add currentTheme state to your AppContext\n\n```tsx\n\/\/ AppContext.tsx\n\nimport { createContext, useState } from \"react\";\n\ninterface IAppContext {\n  currentTheme: string;\n  setCurrentTheme: (theme: string) => void;\n}\n\ninterface IAppProvider {\n  children: React.ReactNode;\n}\n\nexport const AppContext = createContext<IAppContext>({} as IAppContext);\n\nexport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n  const [currentTheme, setCurrentTheme] = useState(\"dark\");\n\n  return (\n    <AppContext.Provider value={{\n      currentTheme,\n      setCurrentTheme,\n      }}\n    >\n      {children}\n    <\/AppContext.Provider>\n  );\n};\n```\n\n## Add AddProvider to your App\n\n```tsx\n\/\/main.tsx\n\nimport ReactDOM from \"react-dom\/client\";\nimport App from \".\/App.tsx\";\nimport { AppProvider } from \".\/AppContext.tsx\";\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n  <AppProvider>\n    <App \/>\n  <\/AppProvider>\n);\n```\n\n## Add currentTheme state to your App\n\n```tsx\n\/\/ App.tsx\n\nimport { useContext } from \"react\";\nimport { AppContext } from \".\/AppContext\";\n\nfunction App() {\nconst { currentTheme } = useContext(AppContext);\n\nreturn (\n  <>\n\t<div data-theme={currentTheme}>\n\t  Your App\n\t<\/div>\n  <\/>\n)}\n\nexport default App;\n```\n\n## Add a Button in YourComponent to change the currentTheme state\n\n```tsx\n\/\/ YourComponent.tsx\n\nimport { AppContext } from \"..\/AppContext\";\nimport { useContext } from \"react\";\n\nfunction YourComponent() {\n  const { setCurrentTheme } = useContext(AppContext);\n\n  function handleThemeClick(theme: string) {\n    setCurrentTheme(theme);\n  }\n  \n  <button onClick={() => handleThemeClick(\"dark\")}>\n    Apply Dark Theme\n  <\/button>\n}\n```"
  }
]
